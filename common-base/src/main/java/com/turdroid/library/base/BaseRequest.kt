package com.turdroid.library.baseimport android.text.TextUtilsimport android.util.Logimport androidx.lifecycle.liveDataimport com.blankj.utilcode.util.LogUtilsimport com.google.gson.JsonSyntaxExceptionimport kotlinx.coroutines.TimeoutCancellationExceptionimport rxhttp.wrapper.exception.HttpStatusCodeExceptionimport rxhttp.wrapper.exception.ParseExceptionimport java.net.ConnectExceptionimport java.net.SocketTimeoutExceptionimport java.net.UnknownHostExceptionimport java.util.concurrent.TimeoutExceptionopen class BaseRequest {    protected fun <T> doRequest(showLoading: Boolean = true, block: suspend () -> Result<T>) =        liveData {            val result = try {                if (showLoading) {                    AppStatus.showLoading()                }                block()            } catch (e: Exception) {                LogUtils.e(Log.getStackTraceString(e))                handleError(e)                Result.failure<T>(e)            }finally {                AppStatus.hideLoading()            }            emit(result)        }    /**     * 这里可以统一处理错误     */    protected open fun handleError(e: Exception) {        when (e) {            is ParseException -> {                //ParseException异常表明请求成功，但是数据不正确                if (TextUtils.equals(e.errorCode,"401")){                    //token失效//                    AppStatus.login()                }else if (!TextUtils.isEmpty(e.message)) {                    if (!TextUtils.isEmpty(e.message)){                        AppStatus.showMessage(e.message!!)                    }else{                        AppStatus.showMessage("操作失败")                    }                }                LogUtils.e("数据异常：code:${e.errorCode}---message:${e.message}")            }            is UnknownHostException -> {                AppStatus.showMessage("当前无网络，请检查你的网络设置")            }            //okhttp全局设置超时            is SocketTimeoutException,                //rxjava中的timeout方法超时            is TimeoutException,                //协程超时            is TimeoutCancellationException -> {                AppStatus.showMessage("连接超时,请稍后再试")            }            is ConnectException -> {                AppStatus.showMessage("网络不给力，请稍候重试！")            }            is HttpStatusCodeException -> {                AppStatus.showMessage("Http状态码异常")            }            is JsonSyntaxException -> {                AppStatus.showMessage("数据解析失败,请检查数据是否正确")            }            else -> {                AppStatus.showMessage("请求失败，请稍后再试")            }        }    }}